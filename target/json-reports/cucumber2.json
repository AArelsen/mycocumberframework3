[
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2020-10-11T19:52:11.746Z",
        "before": [
          {
            "result": {
              "duration": 4000000,
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 3,
        "name": "TC01_Testing_the_data_tables_web_page",
        "description": "",
        "id": "us1002-user-should-add-data-with-parameter;tc01-testing-the-data-tables-web-page",
        "after": [
          {
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png",
                "name": "screenshots"
              }
            ],
            "result": {
              "duration": 786000000,
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 19201000000,
              "status": "passed"
            },
            "line": 4,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 991000000,
              "status": "passed"
            },
            "line": 5,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 701000000,
              "status": "passed"
            },
            "line": 6,
            "name": "user enters the firstname \"Adam\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Adam\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 395000000,
              "status": "passed"
            },
            "line": 7,
            "name": "user  enters the lastname \"Arelsen\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Arelsen\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 292000000,
              "status": "passed"
            },
            "line": 8,
            "name": "user enters the position \"Qa\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Qa\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 264000000,
              "status": "passed"
            },
            "line": 9,
            "name": "user enters the office \"dll\"",
            "match": {
              "arguments": [
                {
                  "val": "\"dll\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 483000000,
              "status": "passed"
            },
            "line": 10,
            "name": "user enters the extension \"123456\"",
            "match": {
              "arguments": [
                {
                  "val": "\"123456\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1141000000,
              "status": "passed"
            },
            "line": 11,
            "name": "user enters the startdate \"2020-11-11\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-11-11\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 609000000,
              "status": "passed"
            },
            "line": 12,
            "name": "user enters the salary \"123456\"",
            "match": {
              "arguments": [
                {
                  "val": "\"123456\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 243000000,
              "status": "passed"
            },
            "line": 13,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1042000000,
              "status": "passed"
            },
            "line": 14,
            "name": "search for the first name \"Adam\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Adam\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//td[class\u003d\u0027sorting_1\u0027]\"}\n  (Session info: chrome\u003d86.0.4240.75)\nFor documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50554}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: f434d0ae54726a8e0c132b13ff749803\n*** Element info: {Using\u003dxpath, value\u003d//td[class\u003d\u0027sorting_1\u0027]}\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)\n\tat org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)\n\tat org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)\n\tat com.sun.proxy.$Proxy18.getText(Unknown Source)\n\tat stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(DataTablesStepDefinition.java:99)\n\tat ✽.verify the name fields contains first name \"Adam\"(file:///Users/duygueren/IdeaProjects/mycocumberframework3/src/test/resources/features/US1002_user_should_add_data_with_parameters.feature:15)\n",
              "duration": 20273000000,
              "status": "failed"
            },
            "line": 15,
            "name": "verify the name fields contains first name \"Adam\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Adam\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      },
      {
        "start_timestamp": "2020-10-11T19:52:58.202Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 18,
        "name": "TC02_Testing_the_data_tables_web_page",
        "description": "",
        "id": "us1002-user-should-add-data-with-parameter;tc02-testing-the-data-tables-web-page",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat stepdefinitions.Hooks.tearDown(Hooks.java:16)\n",
              "duration": 18000000,
              "status": "failed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9028000000,
              "status": "passed"
            },
            "line": 19,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 710000000,
              "status": "passed"
            },
            "line": 20,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 734000000,
              "status": "passed"
            },
            "line": 21,
            "name": "user enters the firstname \"Ad\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Ad\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 253000000,
              "status": "passed"
            },
            "line": 22,
            "name": "user  enters the lastname \"Ar\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Ar\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 327000000,
              "status": "passed"
            },
            "line": 23,
            "name": "user enters the position \"Q\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Q\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 388000000,
              "status": "passed"
            },
            "line": 24,
            "name": "user enters the office \"dl\"",
            "match": {
              "arguments": [
                {
                  "val": "\"dl\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 310000000,
              "status": "passed"
            },
            "line": 25,
            "name": "user enters the extension \"12345688\"",
            "match": {
              "arguments": [
                {
                  "val": "\"12345688\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 963000000,
              "status": "passed"
            },
            "line": 26,
            "name": "user enters the startdate \"2020-11-11\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-11-11\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 347000000,
              "status": "passed"
            },
            "line": 27,
            "name": "user enters the salary \"12345699\"",
            "match": {
              "arguments": [
                {
                  "val": "\"12345699\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 478000000,
              "status": "passed"
            },
            "line": 28,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1156000000,
              "status": "passed"
            },
            "line": 29,
            "name": "search for the first name \"Ad\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Ad\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchElementException: Cannot locate an element using xpath\u003d//td[class\u003d\u0027sorting_1\u0027]\nFor documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: driver.version: RemoteWebDriver\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:327)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)\n\tat org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)\n\tat org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)\n\tat com.sun.proxy.$Proxy18.getText(Unknown Source)\n\tat stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(DataTablesStepDefinition.java:99)\n\tat ✽.verify the name fields contains first name \"Ad\"(file:///Users/duygueren/IdeaProjects/mycocumberframework3/src/test/resources/features/US1002_user_should_add_data_with_parameters.feature:30)\n",
              "duration": 10077000000,
              "status": "failed"
            },
            "line": 30,
            "name": "verify the name fields contains first name \"Ad\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Ad\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          },
          {
            "name": "@regression"
          }
        ]
      },
      {
        "start_timestamp": "2020-10-11T19:53:23.010Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 32,
        "name": "TC03_Testing_the_data_tables_web_page_with_feature_data",
        "description": "",
        "id": "us1002-user-should-add-data-with-parameter;tc03-testing-the-data-tables-web-page-with-feature-data",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat stepdefinitions.Hooks.tearDown(Hooks.java:16)\n",
              "duration": 16000000,
              "status": "failed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Failed to instantiate class stepdefinitions.DataTablesStepDefinition\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:135)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.getInstance(ObjectFactoryServiceLoader.java:121)\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:27)\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:64)\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:49)\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:46)\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:51)\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:67)\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:149)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:83)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:24)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:185)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:83)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat org.apache.maven.surefire.junitcore.pc.InvokerStrategy.schedule(InvokerStrategy.java:54)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler.schedule(Scheduler.java:362)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:219)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:129)\n\t... 39 more\nCaused by: org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat pages.DataTablePage.\u003cinit\u003e(DataTablePage.java:11)\n\tat stepdefinitions.DataTablesStepDefinition.\u003cinit\u003e(DataTablesStepDefinition.java:11)\n\t... 44 more\n",
              "duration": 16000000,
              "status": "failed"
            },
            "line": 33,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "user enters the firstname \"Aa3\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa3\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "user  enters the lastname \"Aa\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "user enters the position \"Qa\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Qa\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "user enters the office \"dla\"",
            "match": {
              "arguments": [
                {
                  "val": "\"dla\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "user enters the extension \"1234568844\"",
            "match": {
              "arguments": [
                {
                  "val": "\"1234568844\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 40,
            "name": "user enters the startdate \"2020-11-11\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-11-11\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 41,
            "name": "user enters the salary \"1234569944\"",
            "match": {
              "arguments": [
                {
                  "val": "\"1234569944\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 42,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "search for the first name \"Aa3\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa3\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 44,
            "name": "verify the name fields contains first name \"Aa3\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa3\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      },
      {
        "start_timestamp": "2020-10-11T19:53:23.136Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 47,
        "name": "TC04_Testing_the_data_tables_web_page_with_feature_data",
        "description": "",
        "id": "us1002-user-should-add-data-with-parameter;tc04-testing-the-data-tables-web-page-with-feature-data",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat stepdefinitions.Hooks.tearDown(Hooks.java:16)\n",
              "duration": 13000000,
              "status": "failed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Failed to instantiate class stepdefinitions.DataTablesStepDefinition\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:135)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.getInstance(ObjectFactoryServiceLoader.java:121)\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:27)\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:64)\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:49)\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:46)\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:51)\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:67)\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:149)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:83)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:24)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:185)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:83)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat org.apache.maven.surefire.junitcore.pc.InvokerStrategy.schedule(InvokerStrategy.java:54)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler.schedule(Scheduler.java:362)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:219)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:129)\n\t... 39 more\nCaused by: org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat pages.DataTablePage.\u003cinit\u003e(DataTablePage.java:11)\n\tat stepdefinitions.DataTablesStepDefinition.\u003cinit\u003e(DataTablesStepDefinition.java:11)\n\t... 44 more\n",
              "duration": 18000000,
              "status": "failed"
            },
            "line": 48,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 49,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "user enters the firstname \"Aa4\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa4\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "user  enters the lastname \"Aa4\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa4\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 52,
            "name": "user enters the position \"Qa\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Qa\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 53,
            "name": "user enters the office \"dla\"",
            "match": {
              "arguments": [
                {
                  "val": "\"dla\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 54,
            "name": "user enters the extension \"1234568844\"",
            "match": {
              "arguments": [
                {
                  "val": "\"1234568844\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 55,
            "name": "user enters the startdate \"2020-11-11\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-11-11\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 56,
            "name": "user enters the salary \"1234569944\"",
            "match": {
              "arguments": [
                {
                  "val": "\"1234569944\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "search for the first name \"Aa4\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa4\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "verify the name fields contains first name \"Aa4\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa4\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      },
      {
        "start_timestamp": "2020-10-11T19:53:23.188Z",
        "before": [
          {
            "result": {
              "duration": 1000000,
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 61,
        "name": "TC05_Testing_the_data_tables_web_page_with_feature_data",
        "description": "",
        "id": "us1002-user-should-add-data-with-parameter;tc05-testing-the-data-tables-web-page-with-feature-data",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat stepdefinitions.Hooks.tearDown(Hooks.java:16)\n",
              "duration": 21000000,
              "status": "failed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Failed to instantiate class stepdefinitions.DataTablesStepDefinition\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:135)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.getInstance(ObjectFactoryServiceLoader.java:121)\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:27)\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:64)\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:49)\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:46)\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:51)\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:67)\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:149)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:83)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:24)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:185)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:83)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat org.apache.maven.surefire.junitcore.pc.InvokerStrategy.schedule(InvokerStrategy.java:54)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler.schedule(Scheduler.java:362)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:219)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:129)\n\t... 39 more\nCaused by: org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat pages.DataTablePage.\u003cinit\u003e(DataTablePage.java:11)\n\tat stepdefinitions.DataTablesStepDefinition.\u003cinit\u003e(DataTablesStepDefinition.java:11)\n\t... 44 more\n",
              "duration": 23000000,
              "status": "failed"
            },
            "line": 62,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 63,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 64,
            "name": "user enters the firstname \"Aa5\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa5\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 65,
            "name": "user  enters the lastname \"Aa5\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa5\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 66,
            "name": "user enters the position \"Qa\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Qa\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 67,
            "name": "user enters the office \"dla\"",
            "match": {
              "arguments": [
                {
                  "val": "\"dla\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 68,
            "name": "user enters the extension \"1234568844\"",
            "match": {
              "arguments": [
                {
                  "val": "\"1234568844\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "user enters the startdate \"2020-11-11\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-11-11\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 70,
            "name": "user enters the salary \"1234569944\"",
            "match": {
              "arguments": [
                {
                  "val": "\"1234569944\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 71,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 72,
            "name": "search for the first name \"Aa5\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa5\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 73,
            "name": "verify the name fields contains first name \"Aa5\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Aa5\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      }
    ],
    "name": "US1002_user_should_add_data_with_parameter",
    "description": "",
    "id": "us1002-user-should-add-data-with-parameter",
    "keyword": "Feature",
    "uri": "file:src/test/resources/features/US1002_user_should_add_data_with_parameters.feature",
    "tags": [
      {
        "name": "@regression",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2020-10-11T19:53:23.312Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 20,
        "name": "TC01_Testing_the_data_tables_web_page",
        "description": "",
        "id": "us1002-user-should-add-data-scenario-outline;tc01-testing-the-data-tables-web-page;test-data-for-the-data-table-test;2",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat stepdefinitions.Hooks.tearDown(Hooks.java:16)\n",
              "duration": 21000000,
              "status": "failed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Failed to instantiate class stepdefinitions.DataTablesStepDefinition\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:135)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.getInstance(ObjectFactoryServiceLoader.java:121)\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:27)\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:64)\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:49)\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:46)\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:51)\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:67)\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:149)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:83)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:24)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:185)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:83)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat org.apache.maven.surefire.junitcore.pc.InvokerStrategy.schedule(InvokerStrategy.java:54)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler.schedule(Scheduler.java:362)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:219)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:129)\n\t... 39 more\nCaused by: org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat pages.DataTablePage.\u003cinit\u003e(DataTablePage.java:11)\n\tat stepdefinitions.DataTablesStepDefinition.\u003cinit\u003e(DataTablesStepDefinition.java:11)\n\t... 44 more\n",
              "duration": 58000000,
              "status": "failed"
            },
            "line": 5,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 7,
            "name": "user enters the firstname \"jon\"",
            "match": {
              "arguments": [
                {
                  "val": "\"jon\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 8,
            "name": "user  enters the lastname \"sam\"",
            "match": {
              "arguments": [
                {
                  "val": "\"sam\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 9,
            "name": "user enters the position \"\u003cpozition\u003e\"",
            "match": {
              "arguments": [
                {
                  "val": "\"\u003cpozition\u003e\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 10,
            "name": "user enters the office \"LA\"",
            "match": {
              "arguments": [
                {
                  "val": "\"LA\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "user enters the extension \"456\"",
            "match": {
              "arguments": [
                {
                  "val": "\"456\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 12,
            "name": "user enters the startdate \"2020-10-10\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-10-10\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 13,
            "name": "user enters the salary \"78900000\"",
            "match": {
              "arguments": [
                {
                  "val": "\"78900000\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 14,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 15,
            "name": "search for the first name \"jon\"",
            "match": {
              "arguments": [
                {
                  "val": "\"jon\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 16,
            "name": "verify the name fields contains first name \"jon\"",
            "match": {
              "arguments": [
                {
                  "val": "\"jon\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      },
      {
        "start_timestamp": "2020-10-11T19:53:23.429Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 21,
        "name": "TC01_Testing_the_data_tables_web_page",
        "description": "",
        "id": "us1002-user-should-add-data-scenario-outline;tc01-testing-the-data-tables-web-page;test-data-for-the-data-table-test;3",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat stepdefinitions.Hooks.tearDown(Hooks.java:16)\n",
              "duration": 35000000,
              "status": "failed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Failed to instantiate class stepdefinitions.DataTablesStepDefinition\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:135)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.getInstance(ObjectFactoryServiceLoader.java:121)\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:27)\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:64)\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:49)\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:46)\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:51)\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:67)\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:149)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:83)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:24)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:185)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:83)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat org.apache.maven.surefire.junitcore.pc.InvokerStrategy.schedule(InvokerStrategy.java:54)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler.schedule(Scheduler.java:362)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:219)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:129)\n\t... 39 more\nCaused by: org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat pages.DataTablePage.\u003cinit\u003e(DataTablePage.java:11)\n\tat stepdefinitions.DataTablesStepDefinition.\u003cinit\u003e(DataTablesStepDefinition.java:11)\n\t... 44 more\n",
              "duration": 32000000,
              "status": "failed"
            },
            "line": 5,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 7,
            "name": "user enters the firstname \"ihsan\"",
            "match": {
              "arguments": [
                {
                  "val": "\"ihsan\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 8,
            "name": "user  enters the lastname \"kim\"",
            "match": {
              "arguments": [
                {
                  "val": "\"kim\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 9,
            "name": "user enters the position \"\u003cpozition\u003e\"",
            "match": {
              "arguments": [
                {
                  "val": "\"\u003cpozition\u003e\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 10,
            "name": "user enters the office \"TX\"",
            "match": {
              "arguments": [
                {
                  "val": "\"TX\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "user enters the extension \"899\"",
            "match": {
              "arguments": [
                {
                  "val": "\"899\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 12,
            "name": "user enters the startdate \"2020-10-11\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-10-11\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 13,
            "name": "user enters the salary \"789000009\"",
            "match": {
              "arguments": [
                {
                  "val": "\"789000009\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 14,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 15,
            "name": "search for the first name \"ihsan\"",
            "match": {
              "arguments": [
                {
                  "val": "\"ihsan\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1000000,
              "status": "skipped"
            },
            "line": 16,
            "name": "verify the name fields contains first name \"ihsan\"",
            "match": {
              "arguments": [
                {
                  "val": "\"ihsan\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      },
      {
        "start_timestamp": "2020-10-11T19:53:23.517Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 22,
        "name": "TC01_Testing_the_data_tables_web_page",
        "description": "",
        "id": "us1002-user-should-add-data-scenario-outline;tc01-testing-the-data-tables-web-page;test-data-for-the-data-table-test;4",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat stepdefinitions.Hooks.tearDown(Hooks.java:16)\n",
              "duration": 51000000,
              "status": "failed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Failed to instantiate class stepdefinitions.DataTablesStepDefinition\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:135)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.getInstance(ObjectFactoryServiceLoader.java:121)\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:27)\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:64)\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:49)\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:46)\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:51)\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:67)\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:149)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:83)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:24)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:185)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:83)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat org.apache.maven.surefire.junitcore.pc.InvokerStrategy.schedule(InvokerStrategy.java:54)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler.schedule(Scheduler.java:362)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:219)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:129)\n\t... 39 more\nCaused by: org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat pages.DataTablePage.\u003cinit\u003e(DataTablePage.java:11)\n\tat stepdefinitions.DataTablesStepDefinition.\u003cinit\u003e(DataTablesStepDefinition.java:11)\n\t... 44 more\n",
              "duration": 93000000,
              "status": "failed"
            },
            "line": 5,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 7,
            "name": "user enters the firstname \"bugra\"",
            "match": {
              "arguments": [
                {
                  "val": "\"bugra\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 8,
            "name": "user  enters the lastname \"cam\"",
            "match": {
              "arguments": [
                {
                  "val": "\"cam\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 9,
            "name": "user enters the position \"\u003cpozition\u003e\"",
            "match": {
              "arguments": [
                {
                  "val": "\"\u003cpozition\u003e\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 10,
            "name": "user enters the office \"AR\"",
            "match": {
              "arguments": [
                {
                  "val": "\"AR\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "user enters the extension \"23462\"",
            "match": {
              "arguments": [
                {
                  "val": "\"23462\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 12,
            "name": "user enters the startdate \"2020-10-12\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-10-12\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 13,
            "name": "user enters the salary \"7890000067\"",
            "match": {
              "arguments": [
                {
                  "val": "\"7890000067\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 14,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 15,
            "name": "search for the first name \"bugra\"",
            "match": {
              "arguments": [
                {
                  "val": "\"bugra\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 16,
            "name": "verify the name fields contains first name \"bugra\"",
            "match": {
              "arguments": [
                {
                  "val": "\"bugra\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      },
      {
        "start_timestamp": "2020-10-11T19:53:23.689Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 23,
        "name": "TC01_Testing_the_data_tables_web_page",
        "description": "",
        "id": "us1002-user-should-add-data-scenario-outline;tc01-testing-the-data-tables-web-page;test-data-for-the-data-table-test;5",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat stepdefinitions.Hooks.tearDown(Hooks.java:16)\n",
              "duration": 33000000,
              "status": "failed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Failed to instantiate class stepdefinitions.DataTablesStepDefinition\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:135)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.getInstance(ObjectFactoryServiceLoader.java:121)\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:27)\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:64)\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:49)\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:46)\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:51)\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:67)\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:149)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:83)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:24)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:185)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:83)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat org.apache.maven.surefire.junitcore.pc.InvokerStrategy.schedule(InvokerStrategy.java:54)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler.schedule(Scheduler.java:362)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:219)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:129)\n\t... 39 more\nCaused by: org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat pages.DataTablePage.\u003cinit\u003e(DataTablePage.java:11)\n\tat stepdefinitions.DataTablesStepDefinition.\u003cinit\u003e(DataTablesStepDefinition.java:11)\n\t... 44 more\n",
              "duration": 44000000,
              "status": "failed"
            },
            "line": 5,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 7,
            "name": "user enters the firstname \"fatih\"",
            "match": {
              "arguments": [
                {
                  "val": "\"fatih\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 8,
            "name": "user  enters the lastname \"york\"",
            "match": {
              "arguments": [
                {
                  "val": "\"york\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 9,
            "name": "user enters the position \"\u003cpozition\u003e\"",
            "match": {
              "arguments": [
                {
                  "val": "\"\u003cpozition\u003e\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 10,
            "name": "user enters the office \"NY\"",
            "match": {
              "arguments": [
                {
                  "val": "\"NY\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "user enters the extension \"5613\"",
            "match": {
              "arguments": [
                {
                  "val": "\"5613\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 12,
            "name": "user enters the startdate \"2020-10-13\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-10-13\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 13,
            "name": "user enters the salary \"6100000\"",
            "match": {
              "arguments": [
                {
                  "val": "\"6100000\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 14,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 15,
            "name": "search for the first name \"fatih\"",
            "match": {
              "arguments": [
                {
                  "val": "\"fatih\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 16,
            "name": "verify the name fields contains first name \"fatih\"",
            "match": {
              "arguments": [
                {
                  "val": "\"fatih\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      },
      {
        "start_timestamp": "2020-10-11T19:53:23.789Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 24,
        "name": "TC01_Testing_the_data_tables_web_page",
        "description": "",
        "id": "us1002-user-should-add-data-scenario-outline;tc01-testing-the-data-tables-web-page;test-data-for-the-data-table-test;6",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.GeneratedConstructorAccessor15.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat stepdefinitions.Hooks.tearDown(Hooks.java:16)\n",
              "duration": 16000000,
              "status": "failed"
            },
            "match": {
              "location": "stepdefinitions.Hooks.tearDown(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "error_message": "io.cucumber.core.exception.CucumberException: Failed to instantiate class stepdefinitions.DataTablesStepDefinition\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:135)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.getInstance(ObjectFactoryServiceLoader.java:121)\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:27)\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:64)\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:49)\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:46)\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:51)\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:67)\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:149)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:83)\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:24)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:185)\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:83)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat org.apache.maven.surefire.junitcore.pc.InvokerStrategy.schedule(InvokerStrategy.java:54)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler.schedule(Scheduler.java:362)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:219)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:405)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat io.cucumber.core.runtime.ObjectFactoryServiceLoader$DefaultJavaObjectFactory.cacheNewInstance(ObjectFactoryServiceLoader.java:129)\n\t... 39 more\nCaused by: org.openqa.selenium.NoSuchWindowException: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome\u003d86.0.4240.75)\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027Duygus-MacBook-Pro.local\u0027, ip: \u0027192.168.0.18\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.13.6\u0027, java.version: \u00271.8.0_261\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 86.0.4240.75, chrome: {chromedriverVersion: 85.0.4183.87 (cd6713ebf92fa..., userDataDir: /var/folders/c7/blcl6lt91w9...}, goog:chromeOptions: {debuggerAddress: localhost:50682}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}\nSession ID: fedf1e9a8bfbdcef14cec49b38cd27d3\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:837)\n\tat utilities.Driver.getDriver(Driver.java:47)\n\tat pages.DataTablePage.\u003cinit\u003e(DataTablePage.java:11)\n\tat stepdefinitions.DataTablesStepDefinition.\u003cinit\u003e(DataTablesStepDefinition.java:11)\n\t... 44 more\n",
              "duration": 17000000,
              "status": "failed"
            },
            "line": 5,
            "name": "user is on the datatables page",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_is_on_the_datatables_page()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "user clicks on the new button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_new_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 7,
            "name": "user enters the firstname \"can\"",
            "match": {
              "arguments": [
                {
                  "val": "\"can\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_firstname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 8,
            "name": "user  enters the lastname \"berati\"",
            "match": {
              "arguments": [
                {
                  "val": "\"berati\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_lastname(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 9,
            "name": "user enters the position \"\u003cpozition\u003e\"",
            "match": {
              "arguments": [
                {
                  "val": "\"\u003cpozition\u003e\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_position(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 10,
            "name": "user enters the office \"san francisco\"",
            "match": {
              "arguments": [
                {
                  "val": "\"san francisco\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_office(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "user enters the extension \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_extension(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 12,
            "name": "user enters the startdate \"2020-10-14\"",
            "match": {
              "arguments": [
                {
                  "val": "\"2020-10-14\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_startdate(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 13,
            "name": "user enters the salary \"1000000\"",
            "match": {
              "arguments": [
                {
                  "val": "\"1000000\"",
                  "offset": 23
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.user_enters_the_salary(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 14,
            "name": "user clicks on the create button",
            "match": {
              "location": "stepdefinitions.DataTablesStepDefinition.user_clicks_on_the_create_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 15,
            "name": "search for the first name \"can\"",
            "match": {
              "arguments": [
                {
                  "val": "\"can\"",
                  "offset": 26
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.search_for_the_first_name(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 16,
            "name": "verify the name fields contains first name \"can\"",
            "match": {
              "arguments": [
                {
                  "val": "\"can\"",
                  "offset": 43
                }
              ],
              "location": "stepdefinitions.DataTablesStepDefinition.verify_the_name_fields_contains_first_name(java.lang.String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      }
    ],
    "name": "US1002_user_should_add_data_scenario_outline",
    "description": "",
    "id": "us1002-user-should-add-data-scenario-outline",
    "keyword": "Feature",
    "uri": "file:src/test/resources/features/US1003_user_should_add_data_scenario_outline.feature",
    "tags": []
  }
]